name: Deploy

on:
  push:
    branches:
      - "*"
      - "!skipci*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set branch_name
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Check branch name is a legal serverless stage name
        run: |
          if [[ ! $branch_name =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]] || [[ $branch_name -gt 128 ]]; then
            echo """
              ------------------------------------------------------------------------------------------------------------------------------
              ERROR:  Please read below
              ------------------------------------------------------------------------------------------------------------------------------
              Bad branch name detected; cannot continue.

              The Serverless Application Framework has a concept of stages that facilitate multiple deployments of the same service.
              In this setup, the git branch name gets passed to Serverless to serve as the stage name.
              The stage name (branch name in this case) is tacked onto the end of the service name by Serverless.
              Therefore, the branch name must be a valid service name.

              From Serverless:
                A service name should only contain alphanumeric (case sensitive) and hyphens. It should start with an alphabetic character and shouldnt exceed 128 characters.

              For Github Actions support, please push your code to a new branch with a name that meets Serverless' service name requirements.
              So, make a new branch with a name that begins with a letter and is made up of only letters, numbers, and hyphens... then delete this branch.
              ------------------------------------------------------------------------------------------------------------------------------
            """
            exit 1
          fi
      - uses: actions/checkout@v1
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          OKTA_METADATA_URL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_OKTA_METADATA_URL] || secrets.OKTA_METADATA_URL }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          SEED_DATABASE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SEED_DATABASE] }}
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Jest setup
        working-directory: services/ui-src
        # run: yarn add jest
        run: yarn install
      - name: unit test & publish coverage
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: 405733a088d24c8ce617d4a0079cdb7c387ff13b20d6ed1bcf4c5eb8e81c413f
        with:
          debug: true
          workingDirectory: ${{github.workspace}}/services/ui-src
          coverageCommand: npm run-script coverage
          coverageLocations: |
            ${{github.workspace}}/services/ui-src/coverage/lcov.info:lcov
      - name: deploy
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an GitHub Actions Secret
          ./deploy.sh $STAGE_PREFIX$branch_name
      #      - name: Run Nightwatch suite
      #        run: |
      #          pushd services
      #          export APPLICATION_ENDPOINT=`./output.sh ui CloudFrontEndpointUrl $STAGE_PREFIX$branch_name`
      #          popd
      #          ./test.sh
      - name: Run Cypress Tests
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui CloudFrontEndpointUrl $STAGE_PREFIX$branch_name`
          popd

          pushd tests/cypress
          if [ "$CI" == "true" ]; then # If we're in a CI system
            if [ ! -d "node_modules" ]; then # If we don't have any node_modules (CircleCI cache miss scenario), run yarn install --frozen-lockfile.  Otherwise, we're all set, do nothing.
              yarn install --frozen-lockfile
            fi
          else # We're not in a CI system, let's yarn install
            yarn install
          fi
          cypress install
          npm run test:ci
          popd
      - name: Store test reults
        uses: actions/upload-artifact@v2
        with:
          name: test_results
          path: tests/nightwatch/tests_output
