name: Deploy

on:
  push:
    branches:
      - "*"
      - "dependabot/**"
      - "!skipci*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  id-token: write
  contents: read
  actions: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: set branch_name
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/heads/dependabot/.* ]]; then # Dependabot builds very long branch names.  This is a switch to make it shorter.
            echo "branch_name=`echo ${GITHUB_REF#refs/heads/} | md5sum | head -c 10 | sed 's/^/x/'`" >> $GITHUB_ENV
          else
            echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
      - name: Validate branch name
        run: ./.github/branchNameValidation.sh $STAGE_PREFIX$branch_name
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_OIDC_ROLE_TO_ASSUME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_OIDC_ROLE_TO_ASSUME] || secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          CODE_CLIMATE_ID: ${{ secrets.CODE_CLIMATE_ID }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          SEED_DATABASE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SEED_DATABASE] }}
      - name: Configure AWS credentials for GitHub Actions OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            services/**/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Jest setup
        working-directory: services/ui-src
        # run: yarn add jest
        run: yarn install
      - name: unit test & publish coverage
        if: env.CODE_CLIMATE_ID != ''
        uses: paambaati/codeclimate-action@v2.7.5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_ID }}
        with:
          debug: true
          workingDirectory: ${{github.workspace}}/services/ui-src
          coverageCommand: npm run-script coverage
          coverageLocations: |
            ${{github.workspace}}/services/ui-src/coverage/lcov.info:lcov
      - name: deploy
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an GitHub Actions Secret
          ./deploy.sh $STAGE_PREFIX$branch_name
        env:
          SKIP_PREFLIGHT_CHECK: true
      - id: endpoint
        run: |
          APPLICATION_ENDPOINT=$(./output.sh ui CloudFrontEndpointUrl $STAGE_PREFIX$branch_name)
          echo "application_endpoint=$APPLICATION_ENDPOINT" >> $GITHUB_OUTPUT
          echo "## Application Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "<$APPLICATION_ENDPOINT>" >> $GITHUB_STEP_SUMMARY
        working-directory: services
    outputs:
      application_endpoint: ${{ steps.endpoint.outputs.application_endpoint}}

  e2e-tests:
    name: E2E Integration Tests (Cypress)
    needs: deploy
    if: ${{ github.ref != 'refs/heads/production' }}
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node16.16.0-chrome107-ff107
      options: --user 1001
    steps:
      - name: Run Cypress Tests
        run: |
          pushd services
          export APPLICATION_ENDPOINT=${{ needs.deploy.outputs.application_endpoint }}
          popd

          pushd tests/cypress
          if [ "$CI" == "true" ]; then # If we're in a CI system
            if [ ! -d "node_modules" ]; then # If we don't have any node_modules (CircleCI cache miss scenario), run yarn install --frozen-lockfile.  Otherwise, we're all set, do nothing.
              yarn install --frozen-lockfile
            fi
          else # We're not in a CI system, let's yarn install
            yarn install
          fi
          npm run test:ci
          popd
      - name: Store test reults
        uses: actions/upload-artifact@v2
        with:
          name: test_results
          path: tests/nightwatch/tests_output
