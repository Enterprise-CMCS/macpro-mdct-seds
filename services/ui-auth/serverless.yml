service: ui-auth

frameworkVersion: "3"

plugins:
  - serverless-s3-bucket-helper
  - serverless-stack-termination-protection
  - serverless-plugin-scripts
  - serverless-bundle
  - serverless-iam-helper

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:  
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}  
  iam:
    role:
      # Even though we are creating our own IAM role that is used in each lambda function below
      # These values are used by the serverless-iam-helper and need to be set
      path: ${self:custom.iamPath}
      permissionsBoundary:
        Fn::If:
          - CreatePermissionsBoundary
          - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
          - !Ref AWS::NoValue

custom:
  project: "seds"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed. You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  attachments_bucket_arn: ${param:AttachmentsBucketArn}
  api_gateway_rest_api_name: ${param:ApiGatewayRestApiName}
  application_endpoint_url: ${param:ApplicationEndpointUrl}
  bootstrapUsersEnabled: ${ssm:/configuration/${self:custom.stage}/cognito/bootstrapUsers/enabled, ssm:/configuration/default/cognito/bootstrapUsers/enabled, ""}
  bootstrapUsersPassword: ${ssm:/configuration/${self:custom.stage}/cognito/bootstrapUsers/password, ssm:/configuration/default/cognito/bootstrapUsers/password, ""}
  okta_metadata_url: ${ssm:/configuration/${self:custom.stage}/oktaMetadataUrl, ""}
  scripts:
    hooks:
      deploy:finalize: |
        if [ ${self:custom.bootstrapUsersEnabled} = "true" ];
        then
          aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${self:custom.stage}-bootstrapUsers --invocation-type RequestResponse /dev/null
        fi

functions:
  bootstrapUsers:
    handler: handlers/createUsers.handler
    role: LambdaApiRole
    environment:
      userPoolId: !Ref CognitoUserPool
      bootstrapUsersPassword: ${self:custom.bootstrapUsersPassword}
    timeout: 60

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
    BackWithOkta:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.okta_metadata_url}
  Resources:
    LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "LambdaApiRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - "*"
                  Resource: !GetAtt CognitoUserPool.Arn
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: ismemberof
            AttributeDataType: String
            Mutable: true
            Required: false
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - ${self:custom.application_endpoint_url}
          - https://localhost:3000/
        DefaultRedirectURI: ${self:custom.application_endpoint_url}
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        LogoutURLs:
          - ${self:custom.application_endpoint_url}
          - https://localhost:3000/
        SupportedIdentityProviders:
          - Fn::If:
              - BackWithOkta
              - !Ref CognitoUserPoolIdentityProvider
              - !Ref AWS::NoValue
        UserPoolId:
          Ref: CognitoUserPool

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain:
          Fn::Join:
            - ""
            - - ${self:custom.stage}-login-
              - Ref: CognitoUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserPoolIdentityProvider:
      Condition: BackWithOkta
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        AttributeMapping:
          email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
          family_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
          given_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
          custom:ismemberof: ismemberof
        IdpIdentifiers:
          - IdpIdentifier
        ProviderDetails:
          MetadataURL: ${self:custom.okta_metadata_url}
        ProviderName: Okta
        ProviderType: SAML
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.stage}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${self:custom.api_gateway_rest_api_name}/*
                - Effect: "Allow"
                  Action:
                    - "s3:*"
                  Resource:
                    # Must use Join here.  See: https://github.com/serverless/serverless/issues/3565
                    - Fn::Join:
                        - ""
                        - - ${self:custom.attachments_bucket_arn}/private/
                          - "$"
                          - "{cognito-identity.amazonaws.com:sub}/*"
    CognitoUserPoolIdParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui-auth/cognito_user_pool_id
        Type: String
        Value: !Ref CognitoUserPool
    CognitoUserPoolClientIdParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:custom.stage}/ui-auth/cognito_user_pool_client_id
        Type: String
        Value: !Ref CognitoUserPoolClient
  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
    UserPoolClientDomain:
      Value:
        Fn::Join:
          - ""
          - - Ref: UserPoolDomain
            - .auth.
            - Ref: AWS::Region
            - .amazoncognito.com
    IdentityPoolId:
      Value: !Ref CognitoIdentityPool
    Region:
      Value: !Sub ${AWS::Region}
