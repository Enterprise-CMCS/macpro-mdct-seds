service: app-api

frameworkVersion: "2"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-associate-waf
  - serverless-stack-termination-protection
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  iamPath: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
  iamPermissionsBoundaryPolicy: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed.  You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  infrastructureType: ${ssm:/configuration/${self:custom.stage}/infrastucture/type~true, ssm:/configuration/default/infrastucture/type~true, "development"}
  AgeRangesTableName: ${env:AGE_RANGES_TABLE_NAME, cf:database-${self:custom.stage}.AgeRangesTableName}
  AgeRangesTableArn: ${env:AGE_RANGES_TABLE_ARN, cf:database-${self:custom.stage}.AgeRangesTableArn}
  AgeRangesTableStreamArn: ${cf:database-${self:custom.stage}.AgeRangesTableStreamArn, cf:database-master.AgeRangesTableStreamArn}
  FormAnswersTableName: ${env:FORM_ANSWERS_TABLE_NAME, cf:database-${self:custom.stage}.FormAnswersTableName}
  FormAnswersTableArn: ${env:FORM_ANSWERS_TABLE_ARN, cf:database-${self:custom.stage}.FormAnswersTableArn}
  FormAnswersTableStreamArn: ${cf:database-${self:custom.stage}.FormAnswersTableStreamArn, cf:database-master.FormAnswersTableStreamArn}
  FormQuestionsTableName: ${env:FORM_QUESTIONS_TABLE_NAME, cf:database-${self:custom.stage}.FormQuestionsTableName}
  FormQuestionsTableArn: ${env:FORM_QUESTIONS_TABLE_ARN, cf:database-${self:custom.stage}.FormQuestionsTableArn}
  FormQuestionsTableStreamArn: ${cf:database-${self:custom.stage}.FormQuestionsTableStreamArn, cf:database-master.FormQuestionsTableStreamArn}
  FormsTableName: ${env:FORMS_TABLE_NAME, cf:database-${self:custom.stage}.FormsTableName}
  FormsTableArn: ${env:FORMS_TABLE_ARN, cf:database-${self:custom.stage}.FormsTableArn}
  FormsTableStreamArn: ${cf:database-${self:custom.stage}.FormsTableStreamArn, cf:database-master.FormsTableStreamArn}
  FormTemplatesTableName: ${env:FORM_TEMPLATES_TABLE_NAME, cf:database-${self:custom.stage}.FormTemplatesTableName}
  FormTemplatesTableArn: ${env:FORM_TEMPLATES_TABLE_ARN, cf:database-${self:custom.stage}.FormTemplatesTableArn}
  FormTemplatesTableStreamArn: ${cf:database-${self:custom.stage}.FormTemplatesTableStreamArn, cf:database-master.FormTemplatesTableStreamArn}
  StateFormsTableName: ${env:STATE_FORMS_TABLE_NAME, cf:database-${self:custom.stage}.StateFormsTableName}
  StateFormsTableArn: ${env:STATE_FORMS_TABLE_ARN, cf:database-${self:custom.stage}.StateFormsTableArn}
  StateTableStreamArn: ${cf:database-${self:custom.stage}.StateTableStreamArn, cf:database-master.StateTableStreamArn}
  StatesTableName: ${env:STATES_TABLE_NAME, cf:database-${self:custom.stage}.StatesTableName}
  StatesTableArn: ${env:STATES_TABLE_ARN, cf:database-${self:custom.stage}.StatesTableArn}
  StatusTableName: ${env:STATUS_TABLE_NAME, cf:database-${self:custom.stage}.StatusTableName}
  StatusTableArn: ${env:STATUS_TABLE_ARN, cf:database-${self:custom.stage}.StatusTableArn}
  StatusTableStreamArn: ${cf:database-${self:custom.stage}.StatusTableStreamArn, cf:database-master.StatusTableStreamArn}
  AuthUserTableName: ${env:AUTH_USER_TABLE_NAME, cf:database-${self:custom.stage}.AuthUserTableName}
  AuthUserTableArn: ${env:AUTH_USER_TABLE_ARN, cf:database-${self:custom.stage}.AuthUserTableArn}
  AuthUserTableStreamArn: ${cf:database-${self:custom.stage}.AuthUserTableStreamArn, cf:database-master.AuthUserTableStreamArn}
  StateFormsTableStreamArn: ${cf:database-${self:custom.stage}.StateFormsTableStreamArn, cf:database-master.StateFormsTableStreamArn}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/seds/bootstrapBrokerStringTls~true, ssm:/configuration/default/seds/bootstrapBrokerStringTls~true}
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id~true, ssm:/configuration/default/vpc/id~true}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  dataSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/kubernetes/a/id~true, ssm:/configuration/default/vpc/subnets/kubernetes/a/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/kubernetes/b/id~true, ssm:/configuration/default/vpc/subnets/kubernetes/b/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/kubernetes/c/id~true, ssm:/configuration/default/vpc/subnets/kubernetes/c/id~true}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id~true, ssm:/configuration/default/vpc/subnets/private/a/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id~true, ssm:/configuration/default/vpc/subnets/private/b/id~true}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id~true, ssm:/configuration/default/vpc/subnets/private/c/id~true}
  warmupEnabled:
    production: true
    development: false
  warmup:
    enabled: ${self:custom.warmupEnabled.${self:custom.infrastructureType}}
    role: LambdaWarmupRole
    vpc: false
    events:
      - schedule: rate(4 minutes)
    timeout: 20
    prewarm: true
    concurrency: 5
    folderName: node_modules/serverless-bundle/src/_warmup
    cleanFolder: false
  scripts:
    hooks:
      package:setupProviderConfiguration: |
        # Remove the timestamp line from the warmup handler so a new function is uploaded
        #   only if a configuration has truly changed.
        set -e
        if [ -d "node_modules/serverless-bundle/src/_warmup" ]; then
          cd node_modules/serverless-bundle/src/_warmup
          sed '/Generated/d' index.js > index.js.sub && mv -f index.js.sub index.js
        fi

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment: # Service wide environment variables
    tbl_age_ranges: ${self:custom.AgeRangesTableName}
    tbl_form_answers: ${self:custom.FormAnswersTableName}
    tbl_form_questions: ${self:custom.FormQuestionsTableName}
    tbl_forms: ${self:custom.FormsTableName}
    tbl_state_forms: ${self:custom.StateFormsTableName}
    tbl_states: ${self:custom.StatesTableName}
    tbl_status: ${self:custom.StatusTableName}
    AgeRangesTableName: ${env:AGE_RANGES_TABLE_NAME, cf:database-${self:custom.stage}.AgeRangesTableName}
    AgeRangesTableArn: ${env:AGE_RANGES_TABLE_ARN, cf:database-${self:custom.stage}.AgeRangesTableArn}
    FormAnswersTableName: ${env:FORM_ANSWERS_TABLE_NAME, cf:database-${self:custom.stage}.FormAnswersTableName}
    FormAnswersTableArn: ${env:FORM_ANSWERS_TABLE_ARN, cf:database-${self:custom.stage}.FormAnswersTableArn}
    FormQuestionsTableName: ${env:FORM_QUESTIONS_TABLE_NAME, cf:database-${self:custom.stage}.FormQuestionsTableName}
    FormQuestionsTableArn: ${env:FORM_QUESTIONS_TABLE_ARN, cf:database-${self:custom.stage}.FormQuestionsTableArn}
    FormsTableName: ${env:FORMS_TABLE_NAME, cf:database-${self:custom.stage}.FormsTableName}
    FormsTableArn: ${env:FORMS_TABLE_ARN, cf:database-${self:custom.stage}.FormsTableArn}
    FormTemplatesTableName: ${env:FORM_TEMPLATES_TABLE_NAME, cf:database-${self:custom.stage}.FormTemplatesTableName}
    FormTemplatesTableArn: ${env:FORM_TEMPLATES_TABLE_ARN, cf:database-${self:custom.stage}.FormTemplatesTableArn}
    StateFormsTableName: ${env:STATE_FORMS_TABLE_NAME, cf:database-${self:custom.stage}.StateFormsTableName}
    StateFormsTableArn: ${env:STATE_FORMS_TABLE_ARN, cf:database-${self:custom.stage}.StateFormsTableArn}
    StatesTableName: ${env:STATES_TABLE_NAME, cf:database-${self:custom.stage}.StatesTableName}
    StatesTableArn: ${env:STATES_TABLE_ARN, cf:database-${self:custom.stage}.StatesTableArn}
    StatusTableName: ${env:STATUS_TABLE_NAME, cf:database-${self:custom.stage}.StatusTableName}
    StatusTableArn: ${env:STATUS_TABLE_ARN, cf:database-${self:custom.stage}.StatusTableArn}
    AuthUserTableName: ${env:AUTH_USER_TABLE_NAME, cf:database-${self:custom.stage}.AuthUserTableName}
    AuthUserTableArn: ${env:AUTH_USER_TABLE_ARN, cf:database-${self:custom.stage}.AuthUserTableArn}
    SteamVersion:  ".v0"

functions:
  loadData:
    handler: handlers/load-data/post/uploadData.main
    role: LambdaApiRole
    events:
      - http:
          path: load-data/upload
          method: post
          cors: true
          authorizer: aws_iam
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.FormAnswersTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.StateFormsTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.FormQuestionsTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.FormsTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.StateTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.StatusTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.AuthUserTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.AgeRangesTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.FormTemplatesTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    role: LambdaApiRole
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    vpc:
      securityGroupIds:
        - Ref: KafkaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  getTableNames:
    handler: handlers/load-data/get/getTableNames.main
    role: LambdaApiRole
    events:
      - http:
          path: load-data/get-table-names
          method: get
          cors: true
          authorizer: aws_iam
  exportToExcel:
    handler: export/exportToExcel.main
    role: LambdaApiRole
    events:
      - http:
          path: export/export-to-excel
          method: post
          cors: true
          authorizer: aws_iam
  getUserById:
    handler: handlers/users/get/getUserById.main
    role: LambdaApiRole
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getUsers:
    handler: handlers/users/get/listUsers.main
    role: LambdaApiRole
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam
  obtainUserByUsername:
    handler: handlers/users/post/obtainUserByUsername.main
    role: LambdaApiRole
    events:
      - http:
          path: users/get
          method: post
          cors: true
          authorizer: aws_iam
  obtainUsernameBySub:
    handler: handlers/users/post/obtainUsernameBySub.main
    role: LambdaApiRole
    events:
      - http:
          path: users/sub
          method: post
          cors: true
          authorizer: aws_iam
  obtainUserByEmail:
    handler: handlers/users/post/obtainUserByEmail.main
    role: LambdaApiRole
    events:
      - http:
          path: users/get/email
          method: post
          cors: true
          authorizer: aws_iam
  obtainUserStamp:
    handler: handlers/users/get/getUsername.main
    role: LambdaApiRole
    events:
      - http:
          path: users/get/username
          method: post
          cors: true
          authorizer: aws_iam
  createUser:
    handler: handlers/users/post/createUser.main
    role: LambdaApiRole
    events:
      - http:
          path: users/add
          method: post
          cors: true
          authorizer: aws_iam
  deleteUser:
    handler: handlers/users/post/deleteUser.main
    role: LambdaApiRole
    events:
      - http:
          path: users/delete
          method: post
          cors: true
          authorizer: aws_iam
  activateDeactivateUser:
    handler: handlers/users/post/activateDeactivateUser.main
    role: LambdaApiRole
    events:
      - http:
          path: users/activation/{username}
          method: post
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: handlers/users/post/updateUser.main
    role: LambdaApiRole
    events:
      - http:
          path: users/update/{userId}
          method: post
          cors: true
          authorizer: aws_iam
  getForm:
    handler: handlers/forms/get.main
    role: LambdaApiRole
    events:
      - http:
          path: single-form/{state}/{specifiedYear}/{quarter}/{form}
          method: get
          cors: true
          authorizer: aws_iam
  getStateFormList:
    handler: handlers/forms/post/obtainFormsList.main
    role: LambdaApiRole
    events:
      - http:
          path: forms/obtain-state-forms
          method: post
          cors: true
          authorizer: aws_iam
  updateStateFormList:
    handler: handlers/state-forms/post/updateStateForms.main
    role: LambdaApiRole
    events:
      - http:
          path: state-forms/update
          method: post
          cors: true
          authorizer: aws_iam
  obtainStateForms:
    handler: handlers/state-forms/post/obtainStateForms.main
    role: LambdaApiRole
    events:
      - http:
          path: state-forms/obtain
          method: post
          cors: true
          authorizer: aws_iam
  obtainAnswerEntriesFromForms:
    handler: handlers/forms/post/obtainAnswerEntriesFromForms.main
    role: LambdaApiRole
    events:
      - http:
          path: form-answers/obtain
          method: post
          cors: true
          authorizer: aws_iam
    timeout: 900
  generateEnrollmentTotals:
    handler: handlers/state-forms/post/generateEnrollmentTotals.main
    role: LambdaApiRole
    events:
      - http:
          path: generate-enrollment-totals
          method: post
          cors: true
          authorizer: aws_iam
    timeout: 900
  obtainAvailableForms:
    handler: handlers/forms/post/obtainAvailableForms.main
    role: LambdaApiRole
    events:
      - http:
          path: forms/obtainAvailableForms
          method: post
          cors: true
          authorizer: aws_iam
  getFormTypes:
    handler: handlers/forms/get/getFormTypes.main
    role: LambdaApiRole
    events:
      - http:
          path: form-types
          method: get
          cors: true
          authorizer: aws_iam
  getAgeRanges:
    handler: handlers/age-ranges/get/getAgeRanges.main
    role: LambdaApiRole
    events:
      - http:
          path: age-ranges
          method: get
          cors: true
          authorizer: aws_iam
  getStates:
    handler: handlers/states/get/getStates.main
    role: LambdaApiRole
    events:
      - http:
          path: states
          method: get
          cors: true
          authorizer: aws_iam
  getStatuses:
    handler: handlers/statuses/get/getStatuses.main
    role: LambdaApiRole
    events:
      - http:
          path: statuses
          method: get
          cors: true
          authorizer: aws_iam
  uncertified:
    handler: handlers/notification/uncertified.main
    role: LambdaApiRole
    events:
      - http:
          path: notification/uncertified
          method: post
          cors: true
          authorizer: aws_iam
  generateQuarterForms:
    handler: handlers/forms/post/generateQuarterForms.main
    role: LambdaApiRole
    events:
      - http:
          path: generate-forms
          method: post
          cors: true
          authorizer: aws_iam
      - schedule:
          enabled: true
          rate: cron(0 0 1 */3 ? *)
    timeout: 800
  stateUsersEmail:
    handler: handlers/notification/stateUsers.main
    role: LambdaApiRole
    events:
      - http:
          path: notification/stateUsersEmail
          method: post
          cors: true
          authorizer: aws_iam
      - schedule:
          enabled: true
          rate: cron(0 0 1 */3 ? *)
  businessUsersEmail:
    handler: handlers/notification/businessUsers.main
    role: LambdaApiRole
    events:
      - http:
          path: notification/businessUsersEmail
          method: post
          cors: true
          authorizer: aws_iam
      - schedule:
          enabled: true
          rate: cron(0 0 1 */3 ? *)
  saveForm:
    handler: handlers/forms/post/saveForm.main
    role: LambdaApiRole
    events:
      - http:
          path: single-form/save
          method: post
          cors: true
          authorizer: aws_iam
  getFormTemplate:
    handler: handlers/form-templates/post/obtainFormTemplate.main
    role: LambdaApiRole
    events:
      - http:
          path: form-template
          method: post
          cors: true
          authorizer: aws_iam
  getFormTemplateYears:
    handler: handlers/form-templates/post/obtainFormTemplateYears.main
    role: LambdaApiRole
    events:
      - http:
          path: form-templates/years
          method: post
          cors: true
          authorizer: aws_iam
  updateCreateFormTemplate:
    handler: handlers/form-templates/post/updateCreateFormTemplate.main
    role: LambdaApiRole
    events:
      - http:
          path: form-templates/add
          method: post
          cors: true
          authorizer: aws_iam

resources:
  Description: ${self:service} ${self:custom.stage}
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.iamPermissionsBoundaryPolicy}
  Resources:
    LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "LambdaApiRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:ListTables
                    - dynamodb:BatchWriteItem
                  Resource:
                    - ${self:custom.AgeRangesTableArn}
                    - ${self:custom.FormAnswersTableArn}
                    - ${self:custom.FormQuestionsTableArn}
                    - ${self:custom.FormsTableArn}
                    - ${self:custom.StateFormsTableArn}
                    - ${self:custom.StatesTableArn}
                    - ${self:custom.StatusTableArn}
                    - ${self:custom.AuthUserTableArn}
                    - ${self:custom.FormTemplatesTableArn}
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListShards
                    - dynamodb:ListStreams
                  Resource:
                    - ${self:custom.AgeRangesTableStreamArn}
                    - ${self:custom.FormAnswersTableStreamArn}
                    - ${self:custom.FormQuestionsTableStreamArn}
                    - ${self:custom.FormsTableStreamArn}
                    - ${self:custom.StateTableStreamArn}
                    - ${self:custom.StateFormsTableStreamArn}
                    - ${self:custom.StatusTableStreamArn}
                    - ${self:custom.AuthUserTableStreamArn}
                    - ${self:custom.FormTemplatesTableStreamArn}
                    #- ${self:custom.AuthUserTableArn}
                    #- ${self:custom.StatusTableArn}
                    #- ${self:custom.AuthUserRolesTableArn}
                    #- ${self:custom.StatesTableArn}
                    #- ${self:custom.FormsTableArn}
                    #- ${self:custom.FormQuestionsTableArn}
                    #- ${self:custom.FormAnswersTableArn}
                    #- ${self:custom.AuthUserStatesTableArn}
                    #- ${self:custom.AuthJobCodesTableArn}
                - Effect: "Allow"
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource:
                    - arn:aws:dynamodb:*:*:table/${self:custom.FormAnswersTableName}/index/*
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: !Sub /arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}
                - Effect: "Allow"
                  Action:
                    - cognito-idp:AdminGetUser
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
    KafkaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for streaming functions.  Egress all is set by default.
        VpcId: ${self:custom.vpcId}
    LambdaWarmupRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "Warmup"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                    - lambda:InvokeAsync
                  Resource: "*"
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.stage}-ApiGwWebAcl
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.webAclName}

  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
